// send calldata -> function dispatch -> function 

/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns ()
#define function readNumberOfHorses() view returns (uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() // assigns to slot 0


// 60008060093d393df3
// 60018060093d393df35f // after PUSH0 5F is PUSH0 opcode
#define macro MAIN() = takes(0) returns(0) {
    // 0x00          // [0] same as PUSH1 0x00
    // calldataload  // [calldata] - first 32 bytes
    // // How do we cut down the calldata to just the function selector?
    // 0xe0          // [0xe0, calldata (32 bytes)]
    // shr           // [functionn_selector]
    // // 0x00 calldataload 0xE0 shr => that's how we get the function selector

    0x00 calldataload 0xe0 shr // [function_selector]

    // jump -> function data associated with the selector
    // cast sig "updateHorseNumber(uint256)" = 0xcdfead2e = function selector
    // cast sig "readNumberOfHorses()" = 0xe026c017 = function selector

    // // updateHorseNumber selector
    // dup1          // [function_selector, function_selector] // so we don't read agan when doing readNumberOfHorses
    // 0xcdfead2e    // [0xcdfead2e, function_selector, function_selector]
    // eq            // [true_if_func_selector_matches, function_selector]
    // // jump to updateHorseNumber code if true
    // updateJump         // [updateHorseNumberProgramCounter, true/false, function_selector]
    // // if we don't jump we still have the function selector on the stack
    // jumpi         // [function_selector]

    // dup1 0xcdfead2e eq updateJump jumpi // [function_selector]
    dup1 __FUNC_SIG(updateHorseNumber) eq updateJump jumpi // [function_selector]

    // // readNumberOfHorses selector 0xe026c017 ???
    // // skip dup1 because this is our last last function selector 
    // 0xe026c017    // [0xe026c017, function_selector]
    // eq            // [true_if_func_selector_matches]
    // // create a different jump label for readNumberOfHorses
    // readJump      // [readJump, true_if_func_selector_matches]
    // jumpi         // [] //jumpIf = jumpi

    __FUNC_SIG(readNumberOfHorses) eq readJump jumpi // [function_selector]

    0x00 0x00 revert    // [] if we don't get a function selector revert

    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()

}
// function selector and parameter data
// 0xcdfead2e 0000000000000000000000000000000000000000000000000000000000000007
#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the value to store from calldata
    0x04            // [4]
    calldataload    // [input value] = [calldata - func_selector] =  [7]
    // 2. Git it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT] // [storage_slot, value] [0] // store at slot 0 (index 0)
    // 3. sstore opcode to store the value/numberOfHorses
    sstore          // []
    stop            // if you don't call stop the code will continue to execute. Stop doesn't cost gas
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the storage slot
    // 2. Load the value from the storage slot into memory (stack)
    // 3. Return the value from memory
    [NUMBER_OF_HORSES_STORAGE_SLOT] // [key/index]
    sload                           // [value] - we have number of horses on the stack
    0x00                            // [0, value]  // to return it, we have to store it in memory first, at index 0x00
    mstore                          // [] // Memory: [value]
    // 0x20 = 32 bytes[
    0x20 0x00 return                // []
}
